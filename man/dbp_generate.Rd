% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dbp_generate.R
\name{dbp_generate}
\alias{dbp_generate}
\title{Create function code based on a database connection.}
\usage{
dbp_generate(connection, package_name, project_is_package = TRUE)
}
\arguments{
\item{connection}{A database connection object.}

\item{project_is_package}{A logical indicating whether dbpkgr is being used
to build a database specific package. If \code{TRUE}, files will be written to
\verb{R/}. Default is \code{FALSE}, which generates files in a custom
dbpkgr/package_name/, ready to be loaded for interactive use with
\code{\link[=dbp_load]{dbp_load()}}.}
}
\value{
Returns \code{NULL} invisibly.
}
\description{
Writes R files for functions intended to create an easy
interface for interacting with a database connection. This can be used
within a database-specific package to quickly generate accessor functions
for the database. By default the files will be written to the R/ directory.

If you primarily want to load the functions for use interactively, but
would like to customise the functions before loading - like
expanding on the basic automatically generated documentation - you can call
\code{\link[=dbp_generate]{dbp_generate()}} with the argument \code{project_is_package = FALSE} and it will
generate the files under a new folder dkpgr/package_name/. You can later
call \code{\link[=dbp_load]{dbp_load()}} to load to your library as package from there.

Just using \code{\link[=dbp_load]{dbp_load()}} is the easy one-liner for having the functions
available interactively.
}
\section{{Generated functions}}{
 The following functions will be created for
the database:
\itemize{
\item{\code{_structure()}} - get a table of catalog, schema and table names.
\item{\code{_list_schemas()}} - get a character vector of schema names.
\item{\code{_list_tables()}} - get a character vector of table names.
\item{\code{_query()}} - get the results of SQL query on the connection.
\item{\code{_execute()}} - execute a SQL statement on the connection.
}

As well as functions for each of the tables in the database.
}

\examples{

\dontrun{
con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
DBI::dbWriteTable(con, "mtcars", mtcars)

dbp_generate(con, "mydb")

devtools::document()
}
}
\seealso{
\code{\link[=dbp_package]{dbp_package()}} the convenient wrapper for these two functions.

\code{\link[=dbp_package_path]{dbp_package_path()}} to locate the package files.

\code{\link[=dbp_unload]{dbp_unload()}} to remove the loaded package.
}
