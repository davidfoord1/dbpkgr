% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dbp_init.R
\name{dbp_init}
\alias{dbp_init}
\alias{dbp_load}
\title{Initialise and load package based on a database connection.}
\usage{
dbp_init(connection, package_name, temp = TRUE)

dbp_load(package_name)
}
\arguments{
\item{connection}{A database connection object.}

\item{package_name}{A string to be used as the name of the temp package and the prefix to its
functions. Must be a valid package name; lowercase no punctuation recommended.}

\item{temp}{Whether the the package should be detached and deleted at
the end of the R session. Set to \code{FALSE} to allow it to persist.}
}
\value{
Returns \code{NULL} invisibly.
}
\description{
\code{\link[=dbp_init]{dbp_init()}} creates a folder for an R package, writes the DESCRIPTION
and .R files, including roxygen comments and function definitions.

\code{\link[=dbp_load]{dbp_load()}} generates help pages and loads the package with
\code{\link[roxygen2:roxygenize]{roxygen2::roxygenise()}}.

As the automatically generated
documentation is quite limited, \code{\link[=dbp_init]{dbp_init()}} is exported to generate the
files without installing the package. You can then make your own changes
to the package like adding more detailed roxygen documentation.
Once you're done,
you can pass the package name to \code{\link[=dbp_load]{dbp_load()}} to install and load
the package.

\code{\link[=dbp_package]{dbp_package()}} is the easy, one-line way to get a package as the connection
interface up and running, which wraps these two functions.
}
\seealso{
\code{\link[=dbp_package]{dbp_package()}} the convenient wrapper for these two functions.
\code{\link[=dbp_package_path]{dbp_package_path()}} to locate the package files.
}
